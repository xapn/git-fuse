#!/bin/bash

# Default values
DEFAULT_OUTPUT="output.txt"
TO_BE_IGNORED_BY_DEFAULT=".*\.git/.*"

usage() {
    local script="$(basename $0)"

    echo -e "${script} - Fuse all contents of the current branch into only one file.\n" \
        "${script} [OPTIONS] [ARGUMENTS]\n" \
        "\n" \
        "OPTIONS\n" \
        "-h, --help\n" \
        "\tDisplay help.\n" \
        "-n, --no-ignore\n" \
        "\tDo not ignore files or folders ignored by Git.\n" \
        "\tBy default, all files or folders ignored by Git are ignored.\n" \
        "\tOptional.\n" \
        "-o, --output OUTPUT_FILE_PATH\n" \
        "\tStore all contents in the output file with the OUT_FILE_PATH path.\n" \
        "\tBy default, the output file path is '${DEFAULT_OUTPUT}'.\n" \
        "\tOptional."
}

printFileNameAsHeader() {
    # FUNC ARGS
    local fileName="$1"
    # END  ARGS

    echo -e \
        " =================================================================\n" \
        "File: ${fileName}\n" \
        "================================================================="
}

whatToIgnore() {
    if [ -f ".gitignore" ]; then
        local ignoredByGit=$(sed -r '/^(#.*)?$/d' .gitignore | paste -sd '|')
    fi
    local readyForFind=$(echo "${ignoredByGit}" | sed 's/\./\\./g; s/\*/.*/g; s/|/\\|/g')"\|${TO_BE_IGNORED_BY_DEFAULT}"
    echo "${readyForFind}"
}

gitFuse() {
    local output="${outputFilePath:=${DEFAULT_OUTPUT}}"

    rm -f "${output}"
    for file in $(find . -type f ! -regex "$(whatToIgnore)"); do
        echo "$(printFileNameAsHeader ${file})" | tee --append "${output}"
        cat  "${file}" | tee --append "${output}"
    done
}

main() {
    # FUNC ARGS
    local args=("$@")
    # END  ARGS

    for arg in "${args[@]}"; do
        shift
        case "${arg}" in
        --help)
            set -- "$@" "-h"
            ;;
        --no-ignore)
            set -- "$@" "-n"
            ;;
        --output)
            set -- "$@" "-o"
            ;;
        *)
            set -- "$@" "${arg}"
            ;;
        esac
    done

    local outputFilePath="" noIgnore=false

    while getopts "hno:" option; do
        case "${option}" in
        h)
            usage && exit 0
            ;;
        n)
            noIgnore=true
            ;;
        o)
            outputFilePath="${OPTARG}"
            ;;
        esac
    done

    gitFuse
}

main $*
